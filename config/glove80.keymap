
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behavior includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */
#define LAYER_Base 0
#define LAYER_Mouse 1
#define LAYER_Cursor 2
#define LAYER_Media 3
#define LAYER_Symbol 4
#define LAYER_Number 5
#define LAYER_Function 6
#define LAYER_Magic 7

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* Custom Device-tree */
#include <dt-bindings/zmk/mouse.h>


/* Glove80 system behavior & macros */
/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };
};


/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

/* PERSONAL CUSTOM BEHAVIORS  */
/ {
behaviors {
  /* Engram shifts */
    one: one_and_pipe {
        compatible = "zmk,behavior-mod-morph";
        label = "ONE_AND_PIPE";
        #binding-cells = <0>;
        bindings = <&kp N1>, <&kp PIPE>; 
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    two: two_and_equal {
        compatible = "zmk,behavior-mod-morph";
        label = "TWO_AND_EQUAL";
        #binding-cells = <0>;
        bindings = <&kp N2>, <&kp EQUAL>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    three: three_and_tilde {
        compatible = "zmk,behavior-mod-morph";
        label = "THREE_AND_TILDE";
        #binding-cells = <0>;
        bindings = <&kp N3>, <&kp TILDE>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    four: four_and_plus {
        compatible = "zmk,behavior-mod-morph";
        label = "FOUR_AND_PLUS";
        #binding-cells = <0>;
        bindings = <&kp N4>, <&kp PLUS>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    five: five_and_less_than {
        compatible = "zmk,behavior-mod-morph";
        label = "FIVE_AND_LESS_THAN";
        #binding-cells = <0>;
        bindings = <&kp N5>, <&kp LESS_THAN>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    six: six_and_greater_than {
        compatible = "zmk,behavior-mod-morph";
        label = "SIX_AND_GREATER_THAN";
        #binding-cells = <0>;
        bindings = <&kp N6>, <&kp GREATER_THAN>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    seven: seven_and_caret {
        compatible = "zmk,behavior-mod-morph";
        label = "SEVEN_AND_CARET";
        #binding-cells = <0>;
        bindings = <&kp N7>, <&kp CARET>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    eight: eight_and_ampersand {
        compatible = "zmk,behavior-mod-morph";
        label = "EIGHT_AND_AMPERSAND";
        #binding-cells = <0>;
        bindings = <&kp N8>, <&kp AMPERSAND>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    nine: nine_and_percent {
        compatible = "zmk,behavior-mod-morph";
        label = "NINE_AND_PERCENT";
        #binding-cells = <0>;
        bindings = <&kp N9>, <&kp PERCENT>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    zero: zero_and_asterisk {
        compatible = "zmk,behavior-mod-morph";
        label = "ZERO_AND_ASTERISK";
        #binding-cells = <0>;
        bindings = <&kp N0>, <&kp ASTERISK>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    apos: apostrophe_and_left_parenthesis {
        compatible = "zmk,behavior-mod-morph";
        label = "APOSTROPHE_AND_LEFT_PARENTHESIS";
        #binding-cells = <0>;
        bindings = <&kp APOSTROPHE>, <&kp LEFT_PARENTHESIS>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    dquote: double_quotes_and_right_parenthesis {
        compatible = "zmk,behavior-mod-morph";
        label = "DOUBLE_QUOTES_AND_RIGHT_PARENTHESIS";
        #binding-cells = <0>;
        bindings = <&kp DOUBLE_QUOTES>, <&kp RIGHT_PARENTHESIS>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    comma: comma_and_semicolon {
        compatible = "zmk,behavior-mod-morph";
        label = "COMMA_AND_SEMICOLON";
        #binding-cells = <0>;
        bindings = <&kp COMMA>, <&kp SEMICOLON>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    period: period_and_colon {
        compatible = "zmk,behavior-mod-morph";
        label = "PERIOD_AND_COLON";
        #binding-cells = <0>;
        bindings = <&kp PERIOD>, <&kp COLON>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    question: question_and_exclamation {
        compatible = "zmk,behavior-mod-morph";
        label = "QUESTION_AND_EXCLAMATION";
        #binding-cells = <0>;
        bindings = <&kp QUESTION>, <&kp EXCLAMATION>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    hash: hash_and_dollar {
        compatible = "zmk,behavior-mod-morph";
        label = "HASH_AND_DOLLAR";
        #binding-cells = <0>;
        bindings = <&kp HASH>, <&kp DOLLAR>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    at: at_and_grave {
        compatible = "zmk,behavior-mod-morph";
        label = "AT_AND_GRAVE";
        #binding-cells = <0>;
        bindings = <&kp AT>, <&kp GRAVE>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    slash: slash_and_backslash {
        compatible = "zmk,behavior-mod-morph";
        label = "SLASH_AND_BACKSLASH";
        #binding-cells = <0>;
        bindings = <&kp SLASH>, <&kp BACKSLASH>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    lparen: left_parenthesis_and_brace {
        compatible = "zmk,behavior-mod-morph";
        label = "PARENTHESIS_AND_BRACE";
        #binding-cells = <0>;
        bindings = <&kp LEFT_PARENTHESIS>, <&kp LEFT_BRACKET>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    rparen: right_parenthesis_and_brace {
        compatible = "zmk,behavior-mod-morph";
        label = "RIGHT_PARENTHESIS_AND_BRACE";
        #binding-cells = <0>;
        bindings = <&kp RIGHT_PARENTHESIS>, <&kp RIGHT_BRACKET>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    lbrace: left_brace_and_less_than {
        compatible = "zmk,behavior-mod-morph";
        label = "LEFT_BRACE_AND_LESS_THAN";
        #binding-cells = <0>;
        bindings = <&kp LEFT_BRACE>, <&kp LESS_THAN>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    rbrace: right_brace_and_greater_than {
        compatible = "zmk,behavior-mod-morph";
        label = "RIGHT_BRACE_AND_GREATER_THAN";
        #binding-cells = <0>;
        bindings = <&kp RIGHT_BRACE>, <&kp GREATER_THAN>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    left: left_and_home {
        compatible = "zmk,behavior-mod-morph";
        label = "LEFT_AND_HOME";
        #binding-cells = <0>;
        bindings = <&kp LEFT>, <&kp HOME>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    right: right_and_end {
        compatible = "zmk,behavior-mod-morph";
        label = "RIGHT_AND_END";
        #binding-cells = <0>;
        bindings = <&kp RIGHT>, <&kp END>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    up: up_and_pgup {
        compatible = "zmk,behavior-mod-morph";
        label = "UP_AND_PGUP";
        #binding-cells = <0>;
        bindings = <&kp UP>, <&kp PG_UP>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    down: down_and_pgdn {
        compatible = "zmk,behavior-mod-morph";
        label = "DOWN_AND_PGDN";
        #binding-cells = <0>;
        bindings = <&kp DOWN>, <&kp PG_DOWN>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
  };
};

/* Automatically generated macro definitions */
/ {
    macros {

    };
};

/* Mod Tap behaviors */
/ {
    behaviors {

        left_pinky: left_pinky {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
        };

        right_pinky: right_pinky {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
        };

        left_ring1: left_ring1 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
        };

        right_ring1: right_ring1 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
        };

        left_ring2: left_ring2 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
        };

        right_ring2: right_ring2 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
        };

        left_middy: left_middy {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            quick-tap-ms = <100>;
        };

        right_middy: right_middy {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            quick-tap-ms = <100>;
        };

        left_index: left_index {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
        };

        right_index: right_index {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
        };

        thumb: thumb {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&mo>, <&kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
        };
    };
};

/* Automatically generated combos definitions */
/ {
    combos {
    compatible = "zmk,combos";
    };
};

/* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Base {
            bindings = <
               &kp F1               &kp F2              &kp F3               &kp F4              &kp F5                                                                                                                &kp F6                &kp F7               &kp F8                &kp F9     &kp F10
             &kp LBKT                 &one                &two               &three               &four      &five                                                                                  &six               &seven                &eight                &nine                 &zero    &kp RBKT
                &hash                &kp B  &left_ring2 RALT Y                &kp O               &kp U      &apos                                                                               &dquote                &kp L                 &kp D  &right_ring2 RALT W                 &kp V       &kp Q
                  &at  &left_pinky LCTRL C  &left_ring1 LALT I  &left_middy LSHFT E  &left_index LGUI A     &comma                                                                               &period  &right_index LGUI H  &right_middy LSHFT T  &right_ring1 LALT S  &right_pinky LCTRL N       &kp Z
               &slash                &kp G               &kp X                &kp J               &kp K  &kp MINUS    &thumb 3 ESC         &none   &none   &none         &none   &thumb 6 DEL  &question                &kp R                 &kp M                &kp F                 &kp P   &kp RSHFT
 &magic LAYER_Magic 0              &lparen             &rparen              &lbrace             &rbrace             &thumb 2 SPACE  &thumb 1 TAB   &none   &none  &thumb 4 RET  &thumb 5 BSPC                        &left             &down            &up               &right  &caps_word
            >;
        };

        layer_Mouse {
            bindings = <
 &bootloader      &none     &none      &none     &none                                                                                      &none           &none         &none            &none   &none
       &none      &none     &none      &none     &none   &none                                                              &none           &none           &none         &none            &none   &none
       &none      &none     &none      &none     &none   &none                                                              &none      &kp K_REDO      &kp K_COPY     &kp K_CUT       &kp K_UNDO   &none
       &none  &kp LCTRL  &kp LALT  &kp LSHFT  &kp LGUI   &none                                                        &kp K_PASTE  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT   &none
       &none      &none     &none      &none     &none   &none   &none   &none   &none   &none      &none  &mkp MCLK        &none  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT   &none
       &none      &none     &none      &none     &none           &none   &none   &none   &none  &mkp RCLK  &mkp LCLK                        &none           &none         &none            &none   &none
            >;
        };

        layer_Cursor {
            bindings = <
 &bootloader      &none     &none      &none     &none                                                                               &none       &none      &none       &none   &none
       &none      &none     &none      &none     &none   &none                                                           &none       &none       &none      &none       &none   &none
       &none      &none     &none      &none     &none   &none                                                           &none  &kp K_REDO  &kp K_COPY  &kp K_CUT  &kp K_UNDO   &none
       &none  &kp LCTRL  &kp LALT  &kp LSHFT  &kp LGUI   &none                                                     &kp K_PASTE    &kp LEFT    &kp DOWN     &kp UP   &kp RIGHT   &none
       &none      &none     &none      &none     &none   &none   &none   &none   &none   &none    &none   &kp DEL      &kp INS    &kp HOME   &kp PG_DN  &kp PG_UP     &kp END   &none
       &none      &none     &none      &none     &none           &none   &none   &none   &none  &kp RET  &kp BSPC                    &none       &none      &none       &none   &none
            >;
        };

        layer_Media {
            bindings = <
 &bootloader      &none     &none      &none     &none                                                                                             &none            &none            &none            &none   &none
       &none      &none     &none      &none     &none   &none                                                                    &none            &none            &none            &none            &none   &none
       &none      &none     &none      &none     &none   &none                                                          &rgb_ug RGB_TOG  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &rgb_ug RGB_HUI   &none
       &none  &kp LCTRL  &kp LALT  &kp LSHFT  &kp LGUI   &none                                                                    &none       &kp C_PREV     &kp C_VOL_DN     &kp C_VOL_UP       &kp C_NEXT   &none
       &none      &none     &none      &none     &none   &none   &none   &none   &none   &none       &none  &kp C_MUTE            &none            &none          &kp F14          &kp F15            &none   &none
       &none      &none     &none      &none     &none           &none   &none   &none   &none  &kp C_STOP    &kp C_PP                             &none            &none            &none            &none   &none
            >;
        };

        layer_Symbol {
            bindings = <
     &none     &none      &none      &none     &none                                                                                &none      &none      &none      &none  &bootloader
     &none     &none      &none      &none     &none      &none                                                          &none      &none      &none      &none      &none        &none
  &kp DLLR  &kp PIPE  &kp EQUAL  &kp TILDE  &kp PLUS     &kp LT                                                         &kp GT  &kp CARET   &kp AMPS  &kp PRCNT   &kp STAR        &none
 &kp GRAVE  &kp LPAR   &kp RPAR   &kp LBRC  &kp RBRC   &kp SEMI                                                      &kp COLON   &kp RGUI  &kp RSHFT   &kp LALT  &kp RCTRL        &none
  &kp BSLH  &kp LBKT   &kp RBKT     &kp LT    &kp GT  &kp UNDER    &kp ESC    &none   &none   &none   &none   &none   &kp EXCL      &none      &none      &none      &none        &none
     &none     &none      &none      &none     &none             &kp SPACE  &kp TAB   &none   &none   &none   &none                 &none      &none      &none      &none        &none
            >;
        };

        layer_Number {
            bindings = <
     &none     &none     &none     &none     &none                                                                               &none      &none     &none      &none  &bootloader
     &none     &none     &none     &none     &none      &none                                                          &none     &none      &none     &none      &none        &none
  &kp DLLR    &kp N1    &kp N2    &kp N3    &kp N4     &kp N5                                                         &kp N6    &kp N7     &kp N8    &kp N9     &kp N0        &none
 &kp GRAVE  &kp LBRC  &kp RBRC  &kp LPAR  &kp RPAR   &kp SEMI                                                      &kp COLON  &kp RGUI  &kp RSHFT  &kp LALT  &kp RCTRL        &none
  &kp BSLH  &kp LBKT  &kp RBKT    &kp LT    &kp GT  &kp UNDER    &kp ESC    &none   &none   &none   &none   &none   &kp EXCL     &none      &none     &none      &none        &none
     &none     &none     &none     &none     &none             &kp SPACE  &kp TAB   &none   &none   &none   &none                &none      &none     &none      &none        &none
            >;
        };

        layer_Function {
            bindings = <
  &none      &none     &none      &none     &none                                                                           &none      &none     &none      &none  &bootloader
  &none      &none     &none      &none     &none    &none                                                        &none     &none      &none     &none      &none        &none
  &none     &kp F1    &kp F2     &kp F3    &kp F4   &kp F5                                                       &kp F6    &kp F7     &kp F8    &kp F9    &kp F10        &none
  &none  &kp LCTRL  &kp LALT  &kp LSHFT  &kp LGUI    &none                                                        &none  &kp RGUI  &kp RSHFT  &kp LALT  &kp RCTRL        &none
  &none    &kp F11   &kp F12    &kp F13   &kp F14  &kp F15    &kp ESC    &none   &none   &none   &none   &none  &kp F16   &kp F17    &kp F18   &kp F19    &kp F20        &none
  &none      &none     &none      &none     &none           &kp SPACE  &kp TAB   &none   &none   &none   &none              &none      &none     &none      &none        &none
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
  &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none      &sys_reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

    };
};
